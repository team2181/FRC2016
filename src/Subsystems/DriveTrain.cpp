// RobotBuilder Version: 2.0ouboule n
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
// Sam Voided RobotBuilders Warranty

//Alex owns this code


#include "DriveTrain.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/DriveTrainCommand.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveTrain::DriveTrain() : Subsystem("DriveTrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    motorRB = RobotMap::driveTrainmotorRB;
    motorRF = RobotMap::driveTrainmotorRF;
    motorLB = RobotMap::driveTrainmotorLB;
    motorLF = RobotMap::driveTrainmotorLF;
    robotdrive = RobotMap::driveTrainrobotdrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	//Sam claims the line below this comment
	gyro = RobotMap::driveGyro;
}

void DriveTrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveTrainCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DriveTrain::drive(Joystick* joystick)
{
	robotdrive->ArcadeDrive(joystick->GetY(), -joystick->GetX());
}
double DriveTrain::GetGyroAngle()
{
	return gyro->GetAngle();
}
void DriveTrain::PrintGyroAngle()
{
	SmartDashboard::PutNumber("Gyro Angle:", gyro->GetAngle());
}
void DriveTrain::ResetGyro()
{
	gyro->Reset();
}
void DriveTrain::CalibrateGyro()
{
	gyro->Calibrate();
}

void DriveTrain::driveFromValues(double speed, double turnval)
{
	robotdrive->ArcadeDrive(speed, turnval);
}
