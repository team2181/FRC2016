// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/ActuateDartCommand.h"
#include "Commands/ActuateLauncherWheelCommand.h"
#include "Commands/ActuateRampCommand.h"
#include "Commands/AutoDriveCommand.h"
#include "Commands/AutoLaunchCommand.h"
#include "Commands/AutonomousPlaceholder.h"
#include "Commands/DistanceOverTimeCG.h"
#include "Commands/DriveTrainCommand.h"
#include "Commands/LaunchCommand.h"
#include "Commands/LauncherDefaultCommand.h"
#include "Commands/RampDefaultCommand.h"
#include "Commands/TurnToGyroCommand.h"
#include "Commands/VisionDefaultCommand.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/AutoAim.h"
#include "Commands/BrakeCoastMode.h"

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    //Mapping
        //opJoystick
            opJoystick.reset(new Joystick(1));
            launch.reset(new JoystickButton(opJoystick.get(), 1));
            launch->WhenPressed(new LaunchCommand());
            dartAim.reset(new JoystickButton(opJoystick.get(), 2));
            dartAim->WhenPressed(new AutoAim());
            launcherWheelBackward.reset(new JoystickButton(opJoystick.get(), 3));
            launcherWheelBackward->WhenPressed(new ActuateLauncherWheelCommand(false));
            launcherWheelForward.reset(new JoystickButton(opJoystick.get(), 4));
            launcherWheelForward->WhenPressed(new ActuateLauncherWheelCommand(true));
            raiseRamp.reset(new JoystickButton(opJoystick.get(), 5));
            raiseRamp->WhileHeld(new ActuateRampCommand(true));
            dartBackward.reset(new JoystickButton(opJoystick.get(), 6));
            dartBackward->WhenPressed(new ActuateDartCommand(false));
            lowerRamp.reset(new JoystickButton(opJoystick.get(), 7));
            lowerRamp->WhileHeld(new ActuateRampCommand(false));
            dartForward.reset(new JoystickButton(opJoystick.get(), 8));
            dartForward->WhenPressed(new ActuateDartCommand(true));
        //driverjoystick
            driverjoystick.reset(new Joystick(0));
            brakeEnable.reset(new JoystickButton(driverjoystick.get(), 2));
            brakeEnable->WhenPressed(new BrakeCoastMode(true));
            brakeDisable.reset(new JoystickButton(driverjoystick.get(), 4));
            brakeDisable->WhenPressed(new BrakeCoastMode(false));


    // SmartDashboard Buttons
    SmartDashboard::PutData("VisionDefaultCommand", new VisionDefaultCommand());
    SmartDashboard::PutData("AutonomousPlaceholder", new AutonomousPlaceholder());
    SmartDashboard::PutData("DistanceOverTimeCG", new DistanceOverTimeCG());
    SmartDashboard::PutData("AutoDriveCommand: default", new AutoDriveCommand(0, 0, 0));
    SmartDashboard::PutData("ActuateRampCommand: default", new ActuateRampCommand(false));
    SmartDashboard::PutData("RampDefaultCommand", new RampDefaultCommand());
    SmartDashboard::PutData("LaunchCommand", new LaunchCommand());
    SmartDashboard::PutData("ActuateDartCommand: default", new ActuateDartCommand(false));
    SmartDashboard::PutData("ActuateLauncherWheelCommand: default", new ActuateLauncherWheelCommand(true));
    SmartDashboard::PutData("LauncherDefaultCommand", new LauncherDefaultCommand());
    SmartDashboard::PutData("DriveTrainCommand", new DriveTrainCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    SmartDashboard::PutData("AutoAim", new AutoAim());

    //Stuck gyro stuff here due to ROBOTBUILDER
    turnTo0.reset(new JoystickButton(driverjoystick.get(), 9)); //change button value
    turnTo0->WhenPressed(new TurnToGyroCommand(0, 2, 3));
    turnTo90.reset(new JoystickButton(driverjoystick.get(), 10)); //change button value
    turnTo90->WhenPressed(new TurnToGyroCommand(90, 2, 3));
    turnTo180.reset(new JoystickButton(driverjoystick.get(), 11)); //change button value
    turnTo180->WhenPressed(new TurnToGyroCommand(180, 2, 3));
    turnTo270.reset(new JoystickButton(driverjoystick.get(), 12)); //change button value
    turnTo270->WhenPressed(new TurnToGyroCommand(270, 2, 3));
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getdriverjoystick() {
   return driverjoystick;
}

std::shared_ptr<Joystick> OI::getopJoystick() {
   return opJoystick;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
bool OI::getButtonLWForward() {return launcherWheelForward.get()->Get();}
bool OI::getButtonLWBackward() {return launcherWheelBackward.get()->Get();}
bool OI::getButtonDartForward() {return dartForward.get()->Get();}
bool OI::getButtonDartBackward() {return dartBackward.get()->Get();}
